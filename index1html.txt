<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cosmic Phenomena Simulation</title>
    <style>
        body { margin: 0; overflow: hidden; }
        #info {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-family: Arial, sans-serif;
            font-size: 16px;
            background-color: rgba(0,0,0,0.5);
            padding: 10px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div id="info">
        Press 1-5 to switch between simulations:<br>
        1: Spiral Galaxy<br>
        2: Elliptical Galaxy<br>
        3: Irregular Galaxy<br>
        4: Star Cluster<br>
        5: Supernova
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cannon.js/0.6.2/cannon.min.js"></script>
    <script>
        let scene, camera, renderer, world;
        let currentSimulation = null;

        function init() {
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.z = 50;

            renderer = new THREE.WebGLRenderer();
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);

            world = new CANNON.World();
            world.gravity.set(0, 0, 0);

            window.addEventListener('resize', onWindowResize, false);
            window.addEventListener('keydown', onKeyDown, false);

            setupSpiralGalaxy();
            animate();
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        function onKeyDown(event) {
            switch(event.key) {
                case '1': setupSpiralGalaxy(); break;
                case '2': setupEllipticalGalaxy(); break;
                case '3': setupIrregularGalaxy(); break;
                case '4': setupStarCluster(); break;
                case '5': setupSupernova(); break;
            }
        }

        function createParticleSystem(particleCount, createParticle) {
            const geometry = new THREE.BufferGeometry();
            const positions = new Float32Array(particleCount * 3);
            const colors = new Float32Array(particleCount * 3);
            const sizes = new Float32Array(particleCount);

            for (let i = 0; i < particleCount; i++) {
                const particle = createParticle(i);
                const i3 = i * 3;
                positions[i3] = particle.position.x;
                positions[i3 + 1] = particle.position.y;
                positions[i3 + 2] = particle.position.z;
                colors[i3] = particle.color.r;
                colors[i3 + 1] = particle.color.g;
                colors[i3 + 2] = particle.color.b;
                sizes[i] = particle.size;

                const body = new CANNON.Body({
                    mass: particle.mass,
                    position: new CANNON.Vec3(particle.position.x, particle.position.y, particle.position.z),
                    velocity: new CANNON.Vec3(particle.velocity.x, particle.velocity.y, particle.velocity.z)
                });
                world.addBody(body);
            }

            geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
            geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
            geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));

            const material = new THREE.PointsMaterial({
                size: 0.1,
                vertexColors: true,
                blending: THREE.AdditiveBlending,
                transparent: true
            });

            const particleSystem = new THREE.Points(geometry, material);
            scene.add(particleSystem);

            return { geometry, particleSystem };
        }

        function setupSpiralGalaxy() {
            clearScene();
            const particleCount = 10000;
            currentSimulation = createParticleSystem(particleCount, (i) => {
                const angle = Math.random() * Math.PI * 2;
                const radius = Math.random() * 20 + 5;
                const x = Math.cos(angle) * radius;
                const y = (Math.random() - 0.5) * 2;
                const z = Math.sin(angle) * radius;
                const color = new THREE.Color().setHSL(Math.random(), 1, 0.5 + Math.random() * 0.5);
                return {
                    position: new THREE.Vector3(x, y, z),
                    color: color,
                    size: Math.random() * 0.5 + 0.1,
                    mass: 1,
                    velocity: new THREE.Vector3(
                        (Math.random() - 0.5) * 0.1,
                        (Math.random() - 0.5) * 0.1,
                        (Math.random() - 0.5) * 0.1
                    )
                };
            });
        }

        function setupEllipticalGalaxy() {
            clearScene();
            const particleCount = 10000;
            currentSimulation = createParticleSystem(particleCount, (i) => {
                const phi = Math.random() * Math.PI * 2;
                const costheta = Math.random() * 2 - 1;
                const u = Math.random();
                const theta = Math.acos(costheta);
                const r = Math.cbrt(u) * 20;
                const x = r * Math.sin(theta) * Math.cos(phi);
                const y = r * Math.sin(theta) * Math.sin(phi);
                const z = r * Math.cos(theta);
                const color = new THREE.Color().setHSL(0.1, 0.5, 0.5 + Math.random() * 0.5);
                return {
                    position: new THREE.Vector3(x, y, z),
                    color: color,
                    size: Math.random() * 0.5 + 0.1,
                    mass: 1,
                    velocity: new THREE.Vector3(
                        (Math.random() - 0.5) * 0.1,
                        (Math.random() - 0.5) * 0.1,
                        (Math.random() - 0.5) * 0.1
                    )
                };
            });
        }

        function setupIrregularGalaxy() {
            clearScene();
            const particleCount = 5000;
            currentSimulation = createParticleSystem(particleCount, (i) => {
                const x = (Math.random() - 0.5) * 40;
                const y = (Math.random() - 0.5) * 40;
                const z = (Math.random() - 0.5) * 40;
                const color = new THREE.Color().setHSL(Math.random(), 1, 0.5 + Math.random() * 0.5);
                return {
                    position: new THREE.Vector3(x, y, z),
                    color: color,
                    size: Math.random() * 0.5 + 0.1,
                    mass: 1,
                    velocity: new THREE.Vector3(
                        (Math.random() - 0.5) * 0.2,
                        (Math.random() - 0.5) * 0.2,
                        (Math.random() - 0.5) * 0.2
                    )
                };
            });
        }

        function setupStarCluster() {
            clearScene();
            const particleCount = 1000;
            currentSimulation = createParticleSystem(particleCount, (i) => {
                const radius = Math.random() * 10;
                const theta = Math.random() * Math.PI * 2;
                const phi = Math.acos(2 * Math.random() - 1);
                const x = radius * Math.sin(phi) * Math.cos(theta);
                const y = radius * Math.sin(phi) * Math.sin(theta);
                const z = radius * Math.cos(phi);
                const color = new THREE.Color().setHSL(0.6, 1, 0.5 + Math.random() * 0.5);
                return {
                    position: new THREE.Vector3(x, y, z),
                    color: color,
                    size: Math.random() * 0.5 + 0.1,
                    mass: 1,
                    velocity: new THREE.Vector3(
                        (Math.random() - 0.5) * 0.05,
                        (Math.random() - 0.5) * 0.05,
                        (Math.random() - 0.5) * 0.05
                    )
                };
            });
        }

        function setupSupernova() {
            clearScene();
            const particleCount = 5000;
            currentSimulation = createParticleSystem(particleCount, (i) => {
                const radius = Math.random() * 0.1;
                const theta = Math.random() * Math.PI * 2;
                const phi = Math.acos(2 * Math.random() - 1);
                const x = radius * Math.sin(phi) * Math.cos(theta);
                const y = radius * Math.sin(phi) * Math.sin(theta);
                const z = radius * Math.cos(phi);
                const color = new THREE.Color().setHSL(0.1, 1, 0.5 + Math.random() * 0.5);
                return {
                    position: new THREE.Vector3(x, y, z),
                    color: color,
                    size: Math.random() * 0.5 + 0.1,
                    mass: 0.1,
                    velocity: new THREE.Vector3(
                        x * 10,
                        y * 10,
                        z * 10
                    )
                };
            });
        }

        function clearScene() {
            while(scene.children.length > 0){ 
                scene.remove(scene.children[0]); 
            }
            while(world.bodies.length > 0){
                world.remove(world.bodies[0]);
            }
        }

        function animate() {
            requestAnimationFrame(animate);

            world.step(1/60);

            if (currentSimulation) {
                const positions = currentSimulation.geometry.attributes.position.array;
                for (let i = 0; i < positions.length; i += 3) {
                    const body = world.bodies[i/3];
                    positions[i] = body.position.x;
                    positions[i+1] = body.position.y;
                    positions[i+2] = body.position.z;
                }
                currentSimulation.geometry.attributes.position.needsUpdate = true;
            }

            renderer.render(scene, camera);
        }

        init();
    </script>
</body>
</html>